library(usethis)
library(devtools)
library(roxygen2)
library(tidyverse)
test <- read_delim("~/Program/BioMLToolkit/binary_classification/TCGA_BRCA_mRNA_elect.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE) %>% column_to_rownames(var = "id")
devtools::use_data("test")
usethis::use_data("test",overwrite = T)
test <- read_delim("~/Program/BioMLToolkit/binary_classification/TCGA_BRCA_mRNA_elect.tsv",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE) %>% column_to_rownames(var = "id")
usethis::use_data(test,overwrite = T)
str_detect
unique
length
unique
as.factor
devtools::document()
devtools::build()
library(BioMLToolkit)
data(test)
tpm = data_handle(test)
View(tpm)
View(test)
View(tpm)
?data_handle
task_creat <- function(data) {
task = as_task_classif(data,target = "type")
task
}
task_creat(tpm)
library(ggsci)
library(tidyverse)
library(readr)
library(DALEX)
library(DALEXtra)
library(pROC)
library(mlr3verse)
library(future)
library(doParallel)
as_task_classif
task_create(tpm) %>% class()
##  创建任务
task_create <- function(data) {
task = as_task_classif(data,target = "type")
task
}
task_create(tpm) %>% class()
#' @title Create Task
#'
#' @param data Result of data_handle().
#'
#' @return TaskClassif,a task base on mlr3
#' @export
#' @importFrom mlr3 as_task_classif
#' @examples task_create(test)
task_create <- function(data) {
task = as_task_classif(data,target = "type")
task
}
#' @title Standardize Data
#' @description Change "-" in column names to "_",
#'     Convert the type to a factor variable.
#' @param data For a gene expression matrix, it is required to have sample names as row names and gene names as column names.
#'     Additionally, there should be an additional column called "type" consisting of 0 and 1, representing whether a sample has been treated or not.
#'     Here, 0 represents the control group (untreated), and 1 represents the treated group.
#' @return Return the processed data.
#' @export
#' @importFrom stringr str_detect str_replace_all
#' @examples data_handle(test)
data_handle  <- function(data) {
################################################################################
if (
str_detect(colnames(data),"-")  %>% unique() %>% length() != 1
) {
colnames(data) = colnames(data) %>% str_replace_all("-","_")
}
################################################################################
data$type = data$type %>% as.factor()
data
}
#' @title Create Task
#'
#' @param data Result of data_handle().
#'
#' @return TaskClassif,a task base on mlr3
#' @export
#' @importFrom mlr3 as_task_classif
#' @examples task_create(test)
task_creat <- function(data) {
task = as_task_classif(data,target = "type")
task
}
devtools::document()
devtools::build()
library(BioMLToolkit)
data(test)
force(test)
?data_handle
data = data(test)
data(test)
data = data_handle(test)
library(BioMLToolkit)
?data_handle
?task_creat
library(BioMLToolkit)
?task_creat
?task_creat
library(BioMLToolkit)
?at_creat
library(BioMLToolkit)
?at_creat
?rpart_imp
?at_creat
library(BioMLToolkit)
?rpart_imp
loss_root_mean_square
library(BioMLToolkit)
data(test)
data = test[,c(1:10)]
res = Comp_imp(data)
library(BioMLToolkit)
res = Comp_imp(data)
library(BioMLToolkit)
res = Comp_imp(data)
res
importance_barplot
library(BioMLToolkit)
data(test)
data = test[,c(1:8)]
res = Comp_imp(data)
res$plot
library(BioMLToolkit)
?efficiency_mod
data(test)
res = efficiency_mod(test[,c(1:10)],multi_threaded = T)
install.packages("mlr3verse")
library(tidyverse)
library("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("kknn")
install.packages("e1071")
install.packages("xgboost")
install.packages("ranger")
install.packages("glmnet")
install.packages("DALEX")
library(DALEXtra)
install.packages("DALEXtra")
install.packages("pROC")
install.packages("mlr3verse")
install.packages("doParellel")
install.packages("foreach")
library(BioMLToolkit)
?Comp_imp
availableCores
library(BioMLToolkit)
availableCores
library(BioMLToolkit)
library(BioMLToolkit)
